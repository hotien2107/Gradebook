import Head from "next/head";
import Link from "next/link";
import { ControlPoint } from "@mui/icons-material";
import { Divider, Typography } from "@mui/material";
import { Fragment, useState } from "react";
import Classes from "../components/class/Classes";
import JoinClass from "../components/class/JoinClass";
import NewClass from "../components/class/NewClass";

export default function Home({ TeachingData, EnrolledData }) {
  const [openAddClass, setOpenAddClass] = useState(false);
  const [openJoinClass, setOpenJoinClass] = useState(false);

  return (
    <Fragment>
      <Head>
        <title>Class</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className="group-title">
        <Typography variant="h5" mt={2} mb={2} className="title">
          <Link href="/classes/Teaching">Teaching</Link>
        </Typography>
        <ControlPoint
          className="icon icon--add"
          onClick={() => setOpenAddClass(true)}
        />
      </div>
      {openAddClass ? <NewClass onClose={() => setOpenAddClass(false)} /> : ""}
      <Classes data={TeachingData} />
      <Divider />

      <div className="group-title">
        <Typography variant="h5" mt={2} mb={2} className="title">
          <Link href="/classes/Enrolled">Enrolled</Link>
        </Typography>
        <ControlPoint
          className="icon icon--add"
          onClick={() => setOpenJoinClass(true)}
        />
      </div>
      {openJoinClass ? (
        <JoinClass onClose={() => setOpenJoinClass(false)} />
      ) : (
        ""
      )}
      <Classes data={EnrolledData} />
    </Fragment>
  );
}

export async function getStaticProps() {
  //fetch data teaching from api
  const url = process.env.ROOT_URL
    ? process.env.ROOT_URL
    : "http://localhost:3000";
  const response_teaching = await fetch(`${url}/api/ClassesTeaching`);
  const data_teaching = await response_teaching.json();
  const dataTeachingFormated = data_teaching.map((item) => ({
    id: item._id.toString(),
    title: item.name,
    image: item.image,
    description: item.description,
  }));
  let dataTeachingSplit = [];
  if (dataTeachingFormated.length > 4) {
    dataTeachingSplit = dataTeachingFormated.slice(0, 4);
  } else {
    dataTeachingSplit = [...dataTeachingFormated];
  }
  const response_enrolled = await fetch(`${url}/api/ClassesEnrolled`);
  const data_enrolled = await response_enrolled.json();
  const dataEnrolledFormated = data_enrolled.map((item) => ({
    id: item._id.toString(),
    title: item.name,
    image: item.image,
    description: item.description,
  }));
  let dataEnrolledSplit = [];
  if (dataEnrolledFormated.length > 4) {
    dataEnrolledSplit = dataEnrolledFormated.slice(0, 4);
  } else {
    dataEnrolledSplit = [...dataEnrolledFormated];
  }
  return {
    props: {
      TeachingData: dataTeachingSplit,
      EnrolledData: dataEnrolledSplit,
    },
    revalidate: 1,
  };
}
